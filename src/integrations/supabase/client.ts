
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';

// Supabase configuration - using direct values instead of relying on environment variables
export const SUPABASE_URL = "https://mgjodiqecnnltsgorife.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1nam9kaXFlY25ubHRzZ29yaWZlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzg2ODgwNzAsImV4cCI6MjA1NDI2NDA3MH0.UAu24UdDN_5iAWPkQBgBgEuq3BZDKjwDiK2_AT84_is";

// Create a singleton instance to avoid multiple instances
let supabaseInstance: ReturnType<typeof createClient<Database>> | null = null;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";
export const supabase = (() => {
  if (!supabaseInstance) {
    console.log("Initializing Supabase client...");
    supabaseInstance = createClient<Database>(
      SUPABASE_URL, 
      SUPABASE_ANON_KEY, 
      {
        auth: {
          persistSession: true,
          storageKey: 'welcomechat_auth_token',
          autoRefreshToken: true,
          detectSessionInUrl: true,
          flowType: 'pkce',
          debug: process.env.NODE_ENV === 'development'
        },
        global: {
          // Increase the timeout for all fetch requests to 60 seconds
          fetch: (url, options) => {
            return fetch(url, {
              ...options,
              signal: options?.signal || (new AbortController().signal),
              headers: {
                ...options?.headers,
                'X-Client-Info': 'welcomechat-web'
              }
            });
          }
        },
        db: {
          schema: 'public'
        },
        realtime: {
          timeout: 60000 // 60 seconds timeout for realtime subscriptions
        }
      }
    );
  }
  return supabaseInstance;
})();

// Export a function to force refresh the session if needed
export const refreshSupabaseSession = async () => {
  try {
    const { data, error } = await supabase.auth.refreshSession();
    if (error) {
      console.error("Error refreshing session:", error);
      return false;
    }
    console.log("Session refreshed successfully");
    return true;
  } catch (e) {
    console.error("Exception refreshing session:", e);
    return false;
  }
};

// Add a network connectivity helper
export const checkSupabaseConnectivity = async (): Promise<boolean> => {
  try {
    const startTime = Date.now();
    const { data, error } = await supabase.from('ai_agents').select('id').limit(1).maybeSingle();
    const endTime = Date.now();
    
    console.log(`Connectivity check completed in ${endTime - startTime}ms`);
    
    if (error) {
      console.error("Connectivity check failed:", error);
      return false;
    }
    return true;
  } catch (e) {
    console.error("Exception during connectivity check:", e);
    return false;
  }
};
