// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables');
}

const storage = {
  getItem: (key: string): string | null => {
    try {
      return localStorage.getItem(key);
    } catch (error) {
      console.error('Error accessing localStorage:', error);
      return null;
    }
  },
  setItem: (key: string, value: string): void => {
    try {
      localStorage.setItem(key, value);
    } catch (error) {
      console.error('Error setting localStorage:', error);
    }
  },
  removeItem: (key: string): void => {
    try {
      localStorage.removeItem(key);
    } catch (error) {
      console.error('Error removing from localStorage:', error);
    }
  }
};

// Create a singleton instance to avoid multiple instances
let supabaseInstance: ReturnType<typeof createClient<Database>> | null = null;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";
export const supabase = (() => {
  if (!supabaseInstance) {
    console.log("Initializing Supabase client...");
    supabaseInstance = createClient<Database>(supabaseUrl, supabaseAnonKey, {
      auth: {
        storage,
        persistSession: true,
        detectSessionInUrl: true,
        flowType: 'pkce',
        autoRefreshToken: true,
        debug: import.meta.env.DEV
      }
    });
  }
  return supabaseInstance;
})();

// Export a function to force refresh the session if needed
export const refreshSupabaseSession = async () => {
  try {
    const { data: { session }, error } = await supabase.auth.getSession();
    if (error) throw error;
    if (!session) {
      await supabase.auth.refreshSession();
    }
    return session;
  } catch (error) {
    console.error('Error refreshing session:', error);
    return null;
  }
};
