
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import { Database } from '@/types/supabase';
import { toast } from 'sonner';

// Supabase configuration - using direct values instead of relying on environment variables
export const SUPABASE_URL = "https://mgjodiqecnnltsgorife.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1nam9kaXFlY25ubHRzZ29yaWZlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzg2ODgwNzAsImV4cCI6MjA1NDI2NDA3MH0.UAu24UdDN_5iAWPkQBgBgEuq3BZDKjwDiK2_AT84_is";

// Create a singleton instance to avoid multiple instances
let supabaseInstance: ReturnType<typeof createClient<Database>> | null = null;

export function getSupabase() {
  if (!supabaseInstance) {
    try {
      console.log("Initializing Supabase client...");
      // Validate required values to prevent initialization with empty strings
      if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
        console.error("Missing Supabase URL or Anon Key");
        throw new Error("Supabase configuration is incomplete. Check console for details.");
      }
      
      supabaseInstance = createClient<Database>(
        SUPABASE_URL, 
        SUPABASE_ANON_KEY, 
        {
          auth: {
            persistSession: true,
            storageKey: 'welcomechat_auth_token',
            autoRefreshToken: true,
            detectSessionInUrl: true,
            flowType: 'pkce',
            debug: false // Turn off debug mode in production
          },
          global: {
            headers: {
              'x-custom-timeout': '15000'  // 15 second timeout
            }
          },
          db: {
            schema: 'public'
          },
          realtime: {
            timeout: 15000  // 15 second timeout for realtime
          }
        }
      );
    } catch (err) {
      console.error("Failed to initialize Supabase client:", err);
      // Return a mock client that won't crash the app
      return createFallbackClient();
    }
  }
  return supabaseInstance;
}

// Create a fallback client that doesn't throw errors but logs them
function createFallbackClient() {
  console.warn("Using fallback Supabase client");
  // This is a minimal implementation to prevent crashes
  const mockMethods = {
    from: () => ({
      select: () => ({ data: null, error: new Error("Using fallback client") }),
      insert: () => ({ data: null, error: new Error("Using fallback client") }),
      update: () => ({ data: null, error: new Error("Using fallback client") }),
      delete: () => ({ data: null, error: new Error("Using fallback client") })
    }),
    auth: {
      getSession: () => Promise.resolve({ data: { session: null }, error: null }),
      onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } } }),
      refreshSession: () => Promise.resolve({ data: null, error: null })
    },
    rpc: () => Promise.resolve({ data: null, error: null })
  };

  return mockMethods as any;
}

// Export the supabase instance
export const supabase = getSupabase();

// Export a function to force refresh the session if needed
export const refreshSupabaseSession = async () => {
  try {
    const { data, error } = await supabase.auth.refreshSession();
    if (error) {
      console.error("Error refreshing session:", error);
      return false;
    }
    console.log("Session refreshed successfully");
    return true;
  } catch (e) {
    console.error("Exception refreshing session:", e);
    return false;
  }
};
