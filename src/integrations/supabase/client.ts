// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';
import { SUPABASE_URL, SUPABASE_ANON_KEY, IS_PRODUCTION, validateEnvironment } from '@/config/env';

// Create a singleton instance to avoid multiple instances
let supabaseInstance: ReturnType<typeof createClient<Database>> | null = null;

const storage = {
  getItem: (key: string): string | null => {
    try {
      return localStorage.getItem(key);
    } catch (error) {
      console.error('Error accessing localStorage:', error);
      return null;
    }
  },
  setItem: (key: string, value: string): void => {
    try {
      localStorage.setItem(key, value);
    } catch (error) {
      console.error('Error setting localStorage:', error);
    }
  },
  removeItem: (key: string): void => {
    try {
      localStorage.removeItem(key);
    } catch (error) {
      console.error('Error removing from localStorage:', error);
    }
  }
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";
export const supabase = (() => {
  if (!supabaseInstance) {
    try {
      // Validate environment variables before initializing
      validateEnvironment();

      console.log("Initializing Supabase client...");
      supabaseInstance = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
        auth: {
          storage,
          persistSession: true,
          detectSessionInUrl: true,
          flowType: 'pkce',
          autoRefreshToken: true,
          debug: !IS_PRODUCTION
        }
      });

      // Test the connection
      supabaseInstance.auth.onAuthStateChange((event, session) => {
        if (event === 'SIGNED_OUT') {
          console.log('User signed out');
        } else if (event === 'SIGNED_IN') {
          console.log('User signed in');
        }
      });

    } catch (error) {
      if (IS_PRODUCTION) {
        toast.error('Unable to connect to the database. Please try again later.');
      } else {
        console.error('Error initializing Supabase client:', error);
      }
      throw error;
    }
  }
  return supabaseInstance;
})();

// Export a function to force refresh the session if needed
export const refreshSupabaseSession = async () => {
  try {
    const { data: { session }, error } = await supabase.auth.getSession();
    if (error) {
      console.error('Error getting session:', error);
      if (IS_PRODUCTION) {
        toast.error('Session error. Please try signing in again.');
      }
      throw error;
    }
    if (!session) {
      const { error: refreshError } = await supabase.auth.refreshSession();
      if (refreshError) {
        console.error('Error refreshing session:', refreshError);
        if (IS_PRODUCTION) {
          toast.error('Unable to refresh session. Please sign in again.');
        }
        throw refreshError;
      }
    }
    return session;
  } catch (error) {
    console.error('Error in refreshSupabaseSession:', error);
    return null;
  }
};
